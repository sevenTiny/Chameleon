@using Chameleon.Entity;
@using SevenTiny.Bantina.Extensions.AspNetCore;
@{
    ViewData["Title"] = "Setting";
    Layout = "~/Views/Shared/_LayoutHeaderStyle.cshtml";

    List<MetaField> metaFields = ViewData["MetaFields"] as List<MetaField> ?? new List<MetaField>();
    List<InterfaceFields> interfaceFields = (Model as List<InterfaceFields>) ?? new List<InterfaceFields>();
}
@{
    ViewData["Level_1"] = "对象管理";
    ViewData["Level_2"] = "接口配置";
}
@await Html.PartialAsync("~/Views/Shared/_PartialNavigation.cshtml")
<style>
    .pane-wrapper {
        width: 100%;
    }

        .pane-wrapper .opration {
            margin-top: 20px;
        }

        .pane-wrapper .row::after {
            content: '';
            display: block;
            clear: both;
        }

    .panel-define {
        margin-top: 20px;
        border: solid 1px #b1b0b0;
    }

        .panel-define .panel-heading .panel-title {
            margin: 0;
            padding: 7px;
            background: #b1b0b0;
            color: #ffffff;
        }

        .panel-define .panel-body {
            padding: 10px 3px;
        }

            .panel-define .panel-body .drag-wrapper {
                min-height: 20px;
            }

                .panel-define .panel-body .drag-wrapper li {
                    width: 100%;
                    padding: 3px 5px;
                    margin-top: 5px;
                    -ms-box-sizing: border-box;
                    -moz-box-sizing: border-box;
                    box-sizing: border-box;
                    border: solid 1px #c2bfbf;
                    background: #e9e9e9;
                    font-weight: 400;
                    color: #2094b7;
                    cursor: pointer;
                }

                    .panel-define .panel-body .drag-wrapper li:first-child {
                        margin-top: 0;
                    }

                .panel-define .panel-body .drag-wrapper .ui-sortable-placeholder {
                    background: #fef0a0;
                    border: none;
                }

    #preFieldList {
        font-size: 0px;
    }

        #preFieldList li {
            width: 49%;
            display: inline-block;
            font-size: 14px;
            margin-right: 1px;
            margin-left: 1px;
        }
</style>
<div class="container pane-wrapper">
    <div class="opration">
        <a class="btn btn-secondary-outline radius" href="javascript:history.back(-1);"><i class="Hui-iconfont">&#xe66b;</i> 返回</a>
        <a class="btn btn-danger radius" href="javascript:history.back(-1);"><i class="Hui-iconfont">&#xe6a6;</i> 取消</a>
        <a class="btn btn-primary radius" href="javascript:addFields();"><i class="Hui-iconfont">&#xe632;</i> 保存</a>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="panel panel-define">
                <div class="panel-heading">
                    <h5 class="panel-title">列表字段</h5>
                </div>
                <div class="panel-body">
                    <ul class="connectedSortable drag-wrapper" id="fieldList">
                        @foreach (var item in interfaceFields.OrderBy(t => t.SortNumber))
                        {
                            <li data-metafieldid="@item.MetaFieldId" title="@item.Code (@item.Name)">@item.MetaFieldCustomViewName <span style="float:right;color:#635f5f"><i class="Hui-iconfont" title="设置" onclick="editField('@item.Id')">&#xe63c;</i> <i class="Hui-iconfont" title="移除" onclick="changeFieldPosition(this)">&#xe6a6;</i></span></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="panel panel-define">
                <div class="panel-heading">
                    <h5 class="panel-title">可选字段列表</h5>
                </div>
                <div class="panel-body">
                    <ul class="connectedSortable drag-wrapper" id="preFieldList">
                        @foreach (var item in metaFields)
                        {
                            <li data-metafieldid="@item.Id" title="@item.Code">@item.Name</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
@await Html.PartialAsync("~/Views/Shared/_FooterScripts.cshtml")
@await Html.PartialAsync("~/Views/Shared/_CommonScript.cshtml")
<script src="~/lib/jquery-ui/jquery-ui.js"></script>
<script>
    $(".connectedSortable").sortable({
        connectWith: ".connectedSortable",
        start: function (e, info) {  //拖放后事件,排序开始事件
            info.item.siblings(".selected").appendTo(info.item);
        },
        stop: function (e, info) {  //停止事件
            info.item.after(info.item.find("li"));
            $(".connectedSortable li").removeClass("selected");
        },
        out: function (event, ui) {
            //移除事件
        }
    });

    //编辑字段事件
    function editField(item) {
        //item拿的是该条数据的id
        layer_show('自定义列表字段', '/InterfaceFields/SeletedMetaFieldEdit?id=' + item, window.innerWidth / 1.5, window.innerHeight / 1.5);
    }

    //修改字段位置
    function changeFieldPosition(item) {
        console.log(item)
        var li = $(item.parentNode.parentNode);
        li.remove();
        $("#preFieldList").append(li)
    }

    //保存字段
    function addFields() {
        var str = [];
        var lists = $('#fieldList li');
        for (var i = 0, len = lists.length; i < len; i++) {
            str.push(lists.eq(i).data('metafieldid'));
        }
        str = str.join(',');

        $.ajax({
            type: 'POST',
            url: '/InterfaceFields/SaveSetting/@ViewData["Id"]',
            dataType: 'json',
            data: {
                "metaFieldIds": str
            },
            success: function (data) {

                layer.msg(data.message, { icon: 1, time: 1000 });

                if (data.isSuccess) {
                    setTimeout(function () {
                        window.location = '/InterfaceFields/Setting?parentMetaFieldsId=@ViewData["Id"]';
                     }, 1000);
                }
            },
            error: function (data) {
                console.log(data.msg);
            },
        });
    }
</script>